type Score = 
 record {
   Player;
   nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type RegisterCallback = func (Metadata) -> ();
type Player = 
 variant {
   plug: principal;
   stoic: principal;
 };
type Metadata = 
 record {
   flavorText: opt text;
   name: text;
   playUrl: text;
 };
type Game = 
 service {
   getFreshCoords: () -> (Coordinate) query;
   getScore: () -> (nat) query;
   metascoreRegisterSelf: (RegisterCallback) -> ();
   metascoreScores: () -> (vec Score) query;
   register: (principal) -> (Result);
   sendNewScores: (vec Score) -> ();
   submitScores: (vec Coordinate) -> (Result);
   unregister: () -> (Result);
 };
type Coordinate = 
 record {
   nat16;
   nat16;
   nat;
   vec nat8;
 };
service : (nat32) -> Game
